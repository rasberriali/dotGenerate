import React, { useState } from 'react';
import axios from 'axios';

function Admin_crud() {
  const data = [
    { id: 1, title: "VR Assisted", difficulty: "Geek", projectType: "Desktop App" },
    { id: 2, title: "Tic Tac Toe", difficulty: "Beginner", projectType: "Mobile App" },
    { id: 3, title: "AI Chatbot", difficulty: "Intermediate", projectType: "Web App" },
    { id: 4, title: "Task Manager", difficulty: "Beginner", projectType: "Desktop App" },
    { id: 5, title: "Weather App", difficulty: "Intermediate", projectType: "Mobile App" },
    { id: 6, title: "E-commerce", difficulty: "Geek", projectType: "Web App" },
    { id: 7, title: "Social Media", difficulty: "Geek", projectType: "Mobile App" },
    { id: 8, title: "Music Player", difficulty: "Beginner", projectType: "Desktop App" },
    { id: 9, title: "Todo App", difficulty: "Beginner", projectType: "Web App" },
    { id: 10, title: "E-learning Platform", difficulty: "Intermediate", projectType: "Web App" },
    { id: 11, title: "Portfolio Website", difficulty: "Beginner", projectType: "Web App" },
    { id: 12, title: "Gaming App", difficulty: "Geek", projectType: "Mobile App" },
  ];

  const [selectedItems, setSelectedItems] = useState([]);
  const [isDeleteConfirmationVisible, setIsDeleteConfirmationVisible] = useState(false);
  const [isAddIdeaVisible, setIsAddIdeaVisible] = useState(false); 

  const [isEditVisible, setIsEditVisible] = useState(false); 
  const [isDeleteVisible, setIsDeleteVisible] = useState(false); 


  const handleCancelDelete = () => {
    setIsDeleteConfirmationVisible(false); // Hide the confirmation card
  };
  
  const handleCloseAddIdea = () => {
    setIsAddIdeaVisible(false); // Corrected function to close Add Idea modal
  };

  const handleCloseEdit = () => {
    setIsEditVisible(false); // Corrected function to close Add Idea modal
  };
  const handleCloseDelete = () => {
    setIsDeleteVisible(false); // Corrected function to close Add Idea modal
  };



 
  const handleDeleteClick = () => {
    if (selectedItems.length === 0) {
      alert("Please select at least one item to delete.");
      return;
    }
    setIsDeleteConfirmationVisible(true); // Show the confirmation card
  };


  //DELETE
  const handleConfirmDelete = () => {
    alert(`Deleting items with IDs: ${selectedItems.join(", ")}`);
    axios
      .post("http://localhost:3001/projects/delete", { ids: selectedItems })
      .then(response => {
        alert("Items deleted successfully");
        setSelectedItems([]); 
        setIsDeleteConfirmationVisible(false);
      })
      .catch(error => {
        console.error("Error deleting items:", error);
        alert("Failed to delete items.");
      });
  };

  //ADD IDEASSSS
  const [difficulty, setDifficulty] = useState("");
  const [projectType, setProjectType] = useState("");
  const [idea, setIdea] = useState("");
  const [loading, setLoading] = useState(false); // To handle loading state

  const handleAddProject = async () => {
    if (!difficulty || !projectType || !idea) {
      alert("Please fill in all fields!");
      return;
    }

    setLoading(true); // Set loading state to true before making the request

    try {
      const response = await axios.post("http://localhost:3001/projects/add", {
        difficulty,
        projectType,
        idea,
      });
      alert(response.data.message);
      // Clear form after successful submission
      setDifficulty("");
      setProjectType("");
      setIdea("");
    } catch (error) {
      console.error("Error adding project:", error);
      alert("Failed to add project!");
    } finally {
      setLoading(false); // Set loading state back to false after the request
    }
  };  



  const itemsPerPage = 5;
  const [currentPage, setCurrentPage] = useState(1);

  // Pagination logic
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentItems = data.slice(indexOfFirstItem, indexOfLastItem);

  const paginate = (pageNumber) => setCurrentPage(pageNumber);
  const totalPages = Math.ceil(data.length / itemsPerPage);

  const handleCheckboxChange = (id) => {
    setSelectedItems((prevSelected) => {
      if (prevSelected.includes(id)) {
        return prevSelected.filter(item => item !== id);
      } else {
        return [...prevSelected, id];
      }
    });
  };





  return (
    <div className="min-h-screen bg-gray-500 p-8">
      <div className="bg-white shadow-lg rounded-lg p-8">
        <div className="flex justify-between gap-4 mb-6">
          <div
            className="bg-gradient-to-r from-green-400 to-teal-500 hover:from-teal-500 hover:to-green-400 text-white font-semibold py-2 px-6 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105 cursor-pointer"
            onClick={() => setIsAddIdeaVisible(true)} // Open Add Idea modal
          >
            Add Idea
          </div>

          <div
            className="bg-gradient-to-r from-red-400 to-red-500 hover:from-red-500 hover:to-red-400 text-white font-semibold py-2 px-6 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105 cursor-pointer"
            onClick={handleDeleteClick}
          >
            Delete
          </div>
        </div>

        {/* Table Section with Fixed Height and Width */}
        <div
          className="overflow-x-auto bg-gray-50 rounded-lg shadow-md mb-6"
          style={{ maxWidth: '100%', height: '500px' }}
        >
          <table className="min-w-full table-auto">
            <thead className="bg-gradient-to-r from-blue-500 to-indigo-600 text-white">
              <tr>
                <th className="px-6 py-3 text-left">ID</th>
                <th className="px-6 py-3 text-left">Idea Title</th>
                <th className="px-6 py-3 text-left">Difficulty</th>
                <th className="px-6 py-3 text-left">Project Type</th>
                <th className="px-6 py-3 text-left">Actions</th>
              </tr>
            </thead>
            <tbody>
              {currentItems.map(item => (
                <tr key={item.id} className="hover:bg-gray-100 transition-colors duration-300">
                  <td className="px-6 py-4 flex items-center space-x-1">
                    <input
                      type="checkbox"
                      className="form-checkbox"
                      checked={selectedItems.includes(item.id)}
                      onChange={() => handleCheckboxChange(item.id)}
                    />
                    <span>{item.id}</span>
                  </td>
                  <td className="px-6 py-4">{item.title}</td>
                  <td className="px-6 py-4">{item.difficulty}</td>
                  <td className="px-6 py-4">{item.projectType}</td>
                  <td className="px-6 py-4">
                    <button className="text-blue-500 hover:text-blue-700" onClick={() => setIsEditVisible(true)}>Edit</button>
                    <button className="ml-4 text-red-500 hover:text-red-700"  onClick={() => setIsDeleteVisible(true)}>Delete</button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {isEditVisible && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
                 <div className="bg-white p-8 shadow-lg rounded-lg w-full max-w-md">
                 <h1 className="text-2xl font-bold mb-4">EDIT</h1>
                 <button
                    onClick={handleCloseEdit}
                    className="bg-gray-500 text-white px-4 py-2 rounded"
                  >
                    Close
                  </button>
                 </div>
                </div>

        )}

        {isDeleteVisible && (
                    <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
                        <div className="bg-white p-8 shadow-lg rounded-lg w-full max-w-md">
                        <h1 className="text-2xl font-bold mb-4">Are you sure u want to delete?</h1>

                        <div className='flex flex-row justify-between'>
                        <button
                            onClick={handleCloseDelete}
                            className="bg-gray-500 text-white px-4 py-2 rounded"
                        >
                            Close
                        </button>
                        <button className='bg-yellow-500 text-white px-4 py-2 rounded'>Yes</button>
                        </div>
                        </div>
                        </div>

                )}




        {/* Add Idea Modal */}
        {isAddIdeaVisible && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
            <div className="bg-white p-8 shadow-lg rounded-lg w-full max-w-md">
              <h1 className="text-2xl font-bold mb-4">Add New Project</h1>
              <div className="space-y-4">
                <select
                  className="w-full p-2 border rounded"
                  onChange={(e) => setDifficulty(e.target.value)}
                  aria-label="Select Difficulty"
                >
                  <option value="">Select Difficulty</option>
                  <option value="Beginner">Beginner</option>
                  <option value="Average">Average</option>
                  <option value="Geek">Geek</option>
                </select>
                <select
                  className="w-full p-2 border rounded"
                  onChange={(e) => setProjectType(e.target.value)}
                  aria-label="Select Project Type"
                >
                  <option value="">Select Project Type</option>
                  <option value="Mobile App">Mobile App</option>
                  <option value="Desktop App">Desktop App</option>
                </select>
                <textarea
                  className="w-full p-2 border rounded"
                  placeholder="Enter your project idea"
                  value={idea}
                  onChange={(e) => setIdea(e.target.value)}
                  aria-label="Enter Project Idea"
                />
                <div className="flex justify-between items-center">
                  <button
                    onClick={handleCloseAddIdea}
                    className="bg-gray-500 text-white px-4 py-2 rounded"
                  >
                    Close
                  </button>
                  <button
                    onClick={handleAddProject}
                    className={`bg-blue-500 text-white px-4 py-2 rounded ${loading ? 'opacity-50 cursor-not-allowed' : ''}`}
                    disabled={loading}
                  >
                    {loading ? "Adding..." : "Add Project"}
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Delete Confirmation Modal */}
        {isDeleteConfirmationVisible && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
            <div className="bg-white p-8 shadow-lg rounded-lg w-full max-w-md">
              <h1 className="text-xl font-semibold mb-4">Are you sure you want to delete?</h1>
              <div className="flex justify-between">
                <button
                  onClick={handleConfirmDelete}
                  className="bg-red-500 text-white px-6 py-2 rounded"
                >
                  Yes, Delete
                </button>
                <button
                  onClick={handleCancelDelete}
                  className="bg-gray-500 text-white px-6 py-2 rounded"
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Pagination Section */}
      <div className="flex justify-center ">
        <nav>
          <ul className="flex gap-2">
            {Array.from({ length: totalPages }, (_, index) => (
              <li key={index + 1}>
                <button
                  onClick={() => paginate(index + 1)}
                  className={`py-2 px-4 rounded ${
                    currentPage === index + 1 ? 'bg-blue-500 text-white' : 'bg-gray-200'
                  }`}
                >
                  {index + 1}
                </button>
              </li>
            ))}
          </ul>
        </nav>
      </div>
    </div>
  );
}

export default Admin_crud;
